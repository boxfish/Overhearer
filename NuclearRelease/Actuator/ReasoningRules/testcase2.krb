# PlanGraph:
has_intention_to
    foreach
        plangraph.int_status($agent, $action, 'int_intendTo')
    assert
        plangraph.has_intention($agent, $action)

has_intention_that
    foreach
        plangraph.int_status($agent, $action, 'int_intendThat')
    assert
        plangraph.has_intention($agent, $action)

parent_of_action
    foreach
        plangraph.subaction_of($subaction, $plannode)
    assert
        plangraph.parent_of($plannode, $subaction)
    
parent_of_parameter
    foreach
        plangraph.param_of($param, $action)
    assert
        plangraph.parent_of($action, $param)

ancestor_of_parent
    foreach
        plangraph.parent_of($parent, $son)
    assert
        plangraph.ancestor_of($parent, $son)
    
ancestor_of_grand
    foreach
        plangraph.parent_of($parent, $son)
        plangraph.parent_of($grand, $parent)
    assert
        plangraph.ancestor_of($grand, $son)

ancestor_of_ancestor
    foreach
        plangraph.parent_of($parent, $son)
        plangraph.ancestor_of($ancestor, $parent)
    assert
        plangraph.ancestor_of($ancestor, $son)

belief_value_of
    foreach
        plangraph.has_intention($agent, $action)
        plangraph.ancestor_of($param, $action)
        plangraph.value_of($value1, $param)
        plangraph.generated_value_of($value2, $action)
        check $value1 == $value2
    assert
        plangraph.belief_value_of($agent, $value1, $param)
    
# Map Roles:
inform_belief_value_of
    foreach
        plangraph.belief_value_of($agent, $value, $param)
        geocontent.type_of($_, $value)
        plangraph.param_of($param, $action)
        plangraph.status_of($status1, $action)
        check $status1 != 'exec_success'
        plangraph.status_of($status2, $param)
        check $status2 != 'param_status_success'
    assert
        maprole.inform_belief_value_of($agent, $value, $param)

contextualize_action
    foreach
        plangraph.has_intention($agent, $action)
        plangraph.context_of($value, $action)
        plangraph.status_of($status, $action)
        check $status != 'exec_success'
    assert
        maprole.contextualize_action($value, $action)

show_mb_value_of
    foreach
        plangraph.param_of($param, $action)
        plangraph.status_of($status1, $action)
        check $status1 != 'exec_success'
        plangraph.status_of('param_status_success', $param)
        plangraph.value_of($value, $param)
        geocontent.type_of($_, $value)
    assert
        maprole.show_mb_value_of($value, $param)

show_subaction_value_of
    foreach
        plangraph.subaction_of($subaction, $action)
        plangraph.type_of('action', $action)
        plangraph.status_of($status1, $action)
        check $status1 != 'exec_success'
        plangraph.status_of('exec_success', $subaction)
        plangraph.generated_value_of($value, $subaction)
        geocontent.type_of($_, $value)
    assert
        maprole.show_subaction_value_of($value, $subaction)
    
# Map Use Tasks:
locate
    foreach
        maprole.inform_belief_value_of($agent, $value, $param)
        geocontent.type_of('location', $value)
    assert
        maptask.locate($value, 'The map is to inform other users of this location')

emphasize
    foreach
        maprole.inform_belief_value_of($agent, $value, $param)
        geocontent.type_of($type, $value)
        check $type != 'layer'
        check $type != 'location'
    assert
        maptask.emphasize($value, 'The map is to inform other users about your belief of the value')
    
background
    foreach
        maprole.contextualize_action($value, $action)
        geocontent.type_of('layer', $value)
    assert
        maptask.background($value, 'The map provides relevant contextual layers about the current activity')

foreground_1
    foreach
        maprole.contextualize_action($value, $action)
        geocontent.type_of($type, $value)
        check $type != 'layer'
    assert
        maptask.foreground($value, 'The map provides relevant contextual features about the current activity')

foreground_2
    foreach
        maprole.show_mb_value_of($value, $param)
        geocontent.type_of($type, $value)
        check $type != 'layer'
    assert
        maptask.foreground($value, 'The map shows the value of parameter that has been mutually believed by the group')

foreground_3
    foreach
        maprole.show_subaction_value_of($value, $action)
        geocontent.type_of($type, $value)
        check $type != 'layer'
    assert
        maptask.foreground($value, 'The map shows the value generated by an action')
            
# Map Visualization Strategies:
locate_stra_1
    foreach
        maptask.locate($value, $_)
    assert
        mapstra.fulfill('locate_stra_1', 'locate', "The map shows at the state-level scale, so that the users can identify the location relative to the belonging State")
        mapstra.locate_stra_1('scale_level', 'state')
        mapstra.locate_stra_1('layer', $value)

locate_stra_2
    foreach
        maptask.locate($value, $_)
    assert
        mapstra.fulfill('locate_stra_2', 'locate', "The map shows the location in the local detail and center to the location to raise user's attention")
        mapstra.locate_stra_2('scale_level', 'local')
        mapstra.locate_stra_2('layer', $value)
        mapstra.locate_stra_2('center', $value)

locate_stra_3
    foreach
        maptask.locate($value, $_)
    assert
        mapstra.fulfill('locate_stra_3', 'locate', "The map shows at the county-level scale and center to the location, so that the users can see the relevant context around the location")
        mapstra.locate_stra_3('scale_level', 'county')
        mapstra.locate_stra_3('layer', $value)
        mapstra.locate_stra_3('center', $value)

emphasize_stra_1
    foreach
        maptask.emphasize($value, $_)
    assert
        mapstra.fulfill('emphasize_stra_1', 'emphasize', "The map emphasize the object by highlighting the boundary")
        mapstra.emphasize_stra_1('layer', $value)
        mapstra.emphasize_stra_1('highlight', $value)
        
emphasize_stra_2
    foreach
        maptask.emphasize($value, $_)
    assert
        mapstra.fulfill('emphasize_stra_2', 'emphasize', "The map emphasize the object by putting the object at the center of map view")
        mapstra.emphasize_stra_2('layer', $value)
        mapstra.emphasize_stra_2('center', $value)

background_stra
    foreach
        maptask.background($value, $_)
    assert
        mapstra.fulfill('background_stra', 'background', 'The map will add the relevant layers as background layers.')
        mapstra.background_stra('layer', $value)

foreground_stra_1
    foreach
        maptask.foreground($value, $_)
    assert
        mapstra.fulfill('foreground_stra_1', 'foreground', 'The map scale must be adjusted so that all the relevant features are visible')
        mapstra.foreground_stra_1('layer', $value)
        mapstra.foreground_stra_1('visible', $value)

foreground_stra_2
    foreach
        maptask.foreground($value, $_)
    assert
        mapstra.fulfill('foreground_stra_2', 'foreground', 'The map scale must be adjusted so that not only the relevant features, but also surrounding contexts are visible')
        mapstra.foreground_stra_2('layer', $value)
        mapstra.foreground_stra_2('visible_in_context', $value)
